{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\artur\\\\WebstormProjects\\\\electronic_textbook\\\\src\\\\components\\\\Dictionary.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\nimport dictionary from '../chapters/dictionary';\r\n\r\nconst Dictionary = ({ language }) => {\r\n    const [term, setTerm] = useState('');\r\n    const [definition, setDefinition] = useState('');\r\n\r\n    const handleSearch = () => {\r\n        const def = dictionary[language][term];\r\n        setDefinition(def ? def : 'Термин не найден.');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Словарь</h2>\r\n            <input\r\n                type=\"text\"\r\n                value={term}\r\n                onChange={(e) => setTerm(e.target.value)}\r\n                placeholder=\"Введите термин\"\r\n            />\r\n            <button onClick={handleSearch}>Найти</button>\r\n            <p>{definition}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dictionary;*/\nimport React, { useState, useEffect } from 'react';\nimport dictionary from '../chapters/dictionary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dictionary = ({\n  language\n}) => {\n  _s();\n  const [term, setTerm] = useState('');\n  const [definition, setDefinition] = useState('');\n  const [currentLanguage, setCurrentLanguage] = useState(language);\n  useEffect(() => {\n    setCurrentLanguage(language);\n  }, [language]);\n  const handleSearch = () => {\n    const termDefinition = dictionary[currentLanguage][term];\n    setDefinition(termDefinition ? termDefinition : 'Термин не найден.');\n  };\n  const changeLanguage = newLanguage => {\n    setCurrentLanguage(newLanguage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043B\\u043E\\u0432\\u0430\\u0440\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => changeLanguage(currentLanguage === 'ru' ? 'en' : 'ru'),\n      children: currentLanguage === 'ru' ? 'Switch to English' : 'Переключить на русский'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: term,\n      onChange: e => setTerm(e.target.value),\n      placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0442\\u0435\\u0440\\u043C\\u0438\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"\\u041D\\u0430\\u0439\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: definition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(Dictionary, \"geUsvyFmlzkxgMaa05ul6AnCH2g=\");\n_c = Dictionary;\nexport default Dictionary;\nvar _c;\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"names":["React","useState","useEffect","dictionary","jsxDEV","_jsxDEV","Dictionary","language","_s","term","setTerm","definition","setDefinition","currentLanguage","setCurrentLanguage","handleSearch","termDefinition","changeLanguage","newLanguage","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/artur/WebstormProjects/electronic_textbook/src/components/Dictionary.jsx"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport dictionary from '../chapters/dictionary';\r\n\r\nconst Dictionary = ({ language }) => {\r\n    const [term, setTerm] = useState('');\r\n    const [definition, setDefinition] = useState('');\r\n\r\n    const handleSearch = () => {\r\n        const def = dictionary[language][term];\r\n        setDefinition(def ? def : 'Термин не найден.');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Словарь</h2>\r\n            <input\r\n                type=\"text\"\r\n                value={term}\r\n                onChange={(e) => setTerm(e.target.value)}\r\n                placeholder=\"Введите термин\"\r\n            />\r\n            <button onClick={handleSearch}>Найти</button>\r\n            <p>{definition}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dictionary;*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport dictionary from '../chapters/dictionary';\r\n\r\nconst Dictionary = ({ language }) => {\r\n    const [term, setTerm] = useState('');\r\n    const [definition, setDefinition] = useState('');\r\n    const [currentLanguage, setCurrentLanguage] = useState(language);\r\n\r\n    useEffect(() => {\r\n        setCurrentLanguage(language);\r\n    }, [language]);\r\n\r\n    const handleSearch = () => {\r\n        const termDefinition = dictionary[currentLanguage][term];\r\n        setDefinition(termDefinition ? termDefinition : 'Термин не найден.');\r\n    };\r\n\r\n    const changeLanguage = (newLanguage) => {\r\n        setCurrentLanguage(newLanguage);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Словарь</h2>\r\n            <button onClick={() => changeLanguage(currentLanguage === 'ru' ? 'en' : 'ru')}>\r\n                {currentLanguage === 'ru' ? 'Switch to English' : 'Переключить на русский'}\r\n            </button>\r\n            <input\r\n                type=\"text\"\r\n                value={term}\r\n                onChange={(e) => setTerm(e.target.value)}\r\n                placeholder=\"Введите термин\"\r\n            />\r\n            <button onClick={handleSearch}>Найти</button>\r\n            <p>{definition}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dictionary;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAACM,QAAQ,CAAC;EAEhEL,SAAS,CAAC,MAAM;IACZY,kBAAkB,CAACP,QAAQ,CAAC;EAChC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,cAAc,GAAGb,UAAU,CAACU,eAAe,CAAC,CAACJ,IAAI,CAAC;IACxDG,aAAa,CAACI,cAAc,GAAGA,cAAc,GAAG,mBAAmB,CAAC;EACxE,CAAC;EAED,MAAMC,cAAc,GAAIC,WAAW,IAAK;IACpCJ,kBAAkB,CAACI,WAAW,CAAC;EACnC,CAAC;EAED,oBACIb,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBlB,OAAA;MAAQmB,OAAO,EAAEA,CAAA,KAAMP,cAAc,CAACJ,eAAe,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAE;MAAAM,QAAA,EACzEN,eAAe,KAAK,IAAI,GAAG,mBAAmB,GAAG;IAAwB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eACTlB,OAAA;MACIoB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEjB,IAAK;MACZkB,QAAQ,EAAGC,CAAC,IAAKlB,OAAO,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACzCI,WAAW,EAAC;IAAgB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACFlB,OAAA;MAAQmB,OAAO,EAAET,YAAa;MAAAI,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7ClB,OAAA;MAAAc,QAAA,EAAIR;IAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEd,CAAC;AAACf,EAAA,CAlCIF,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AAoChB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}